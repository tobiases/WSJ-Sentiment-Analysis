// Fast headline sentiment analysis for financial news using phrase and word sets

// --- Phrase Sentiments (copy your lists here, trimmed for brevity in this snippet) ---
const phraseSentiments = [
  // Bullish
  { phrase: "acquisition completed", score: 2 },
  { phrase: "profit accelerates", score: 2 },
  // ... (all other phrases from your list)
  // Bearish
  { phrase: "profit warning", score: -2 },
  { phrase: "profit slides", score: -2 },
  // ... (all other phrases from your list)
];

// Fallback word sets
const fallbackBullish = [
  "soar", "rise", "gain", "surge", "up", "record", "growth", "strong", "bull", "beat", "rally", "jump", "increase", "expand", "rebound", "outperform", "profit", "boost", "improve", "positive", "win", "approve", "acquire", "secure", "recover", "comeback", "dividend", "buyback", "milestone", "partnership", "award", "launch", "achievement"
];
const fallbackBearish = [
  "fall", "drop", "decline", "down", "slump", "loss", "weak", "bear", "miss", "plunge", "crash", "decrease", "layoff", "recall", "probe", "cut", "warn", "negative", "default", "investigation", "lawsuit", "delay", "downgrade", "fined", "scandal", "suspend", "terminate", "halt", "shut", "strike", "bankruptcy", "restatement", "outage"
];

// --- Convert phraseSentiments to fast lookup maps ---
const phraseMap = new Map();
for (const { phrase, score } of phraseSentiments) {
  phraseMap.set(phrase, score);
}
const fallbackBullishSet = new Set(fallbackBullish);
const fallbackBearishSet = new Set(fallbackBearish);

// --- Preprocess phrase keys for fast substring search ---
const phrasesByWordCount = {};
for (const { phrase } of phraseSentiments) {
  const wordCount = phrase.split(' ').length;
  if (!phrasesByWordCount[wordCount]) phrasesByWordCount[wordCount] = [];
  phrasesByWordCount[wordCount].push(phrase);
}
const phraseWordCounts = Object.keys(phrasesByWordCount).map(Number).sort((a, b) => b - a);

// --- Main function: FASTEST, single pass, no trie, no regex ---
function getSentiment(headline) {
  const text = headline.toLowerCase();
  const words = text.match(/\b[\w'-]+\b/g) || [];
  let score = 0;

  // Phrase scan: check n-word phrases, longest first
  for (const n of phraseWordCounts) {
    for (let i = 0; i <= words.length - n; i++) {
      const maybePhrase = words.slice(i, i + n).join(' ');
      if (phraseMap.has(maybePhrase)) {
        score += phraseMap.get(maybePhrase);
        // Optionally, skip overlapping (i += n-1)
      }
    }
  }

  // Fallback word sets if score is still 0
  if (score === 0) {
    for (const word of words) {
      if (fallbackBullishSet.has(word)) score += 1;
      if (fallbackBearishSet.has(word)) score -= 1;
    }
  }

  if (score > 0) return "Bullish";
  if (score < 0) return "Bearish";
  return "Neutral";
}

// --- Export for Node or browser ---
if (typeof module !== "undefined" && module.exports) {
  module.exports = { getSentiment };
}

// Example usage:
// console.log(getSentiment("Company posts record profit, launches buyback"));
// -> "Bullish"
